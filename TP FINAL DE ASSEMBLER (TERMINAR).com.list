EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
TP FINAL DE ASSEMBLER (TERMINAR).com -- emu8086 assembler version: 4.08  
 
[ 18/07/2016  --  15:13:42 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ; memoria
[   2]        :                                       
[   3]        :                                       org 100h
[   4]        :                                       
[   5]        :                                       ;biblioteca
[   6]        :                                       include "emu8086.inc"
[   7]        :                                       
[   8]        :                                       ;variable constante
[   9]        :                                       arraytamaño equ 10
[  10]        :                                       
[  11]        :                                       ;el vector
[  12]    0100: 0A 00                                 array dw arraytamaño
[  13]        :                                       
[  14]        :                                       ;ingresos
[  15]        :                                       ;mensajes del vector
[  16]    0102: 69 6E 67 72 65 73 65 20 75 6E 20 6E   ingreseNum db "ingrese un numero: $"
                75 6D 65 72 6F 3A 20 24             
[  17]        :                                       
[  18]        :                                       ;mensaje de los ingresos de los numeros
[  19]    0116: 69 6E 67 72 65 73 65 20 65 6C 20 70   primerDividendo db "ingrese el primer numero (dividendo): $"
                72 69 6D 65 72 20 6E 75 6D 65 72 6F 
                20 28 64 69 76 69 64 65 6E 64 6F 29 
                3A 20 24                            
[  20]    013D: 69 6E 67 72 65 73 65 20 65 6C 20 73   segundoDividendo db "ingrese el segundo numero (dividendo): $"
                65 67 75 6E 64 6F 20 6E 75 6D 65 72 
                6F 20 28 64 69 76 69 64 65 6E 64 6F 
                29 3A 20 24                         
[  21]    0165: 69 6E 67 72 65 73 65 20 65 6C 20 64   divisorDeNumeros db "ingrese el divisor de los numeros: $"
                69 76 69 73 6F 72 20 64 65 20 6C 6F 
                73 20 6E 75 6D 65 72 6F 73 3A 20 24 
                                                    
[  22]    0189: 72 65 73 74 6F 20 65 73 3A 20 24      resDivisionA db "resto es: $"
[  23]    0194: 72 65 73 74 6F 20 65 73 3A 20 24      resDivisionB db "resto es: $"
[  24]    019F: 63 6F 63 69 65 6E 74 65 20 65 73 3A   cosDivisionA db "cociente es: $"
                20 24                               
[  25]    01AD: 63 6F 63 69 65 6E 74 65 20 65 73 3A   cosDivisionB db "cociente es: $"
                20 24                               
[  26]    01BB: 65 6C 20 72 65 73 75 6C 74 61 64 6F   resMultiplicacionRestos db "el resultado de la multiplicacion de los restos es: $"
                20 64 65 20 6C 61 20 6D 75 6C 74 69 
                70 6C 69 63 61 63 69 6F 6E 20 64 65 
                20 6C 6F 73 20 72 65 73 74 6F 73 20 
                65 73 3A 20 24                      
[  27]    01F0: 65 6C 20 72 65 73 75 6C 74 61 64 6F   resMultiplicacionCocientes db "el resultado de la multiplicacion de los cocientes es: $"
                20 64 65 20 6C 61 20 6D 75 6C 74 69 
                70 6C 69 63 61 63 69 6F 6E 20 64 65 
                20 6C 6F 73 20 63 6F 63 69 65 6E 74 
                65 73 20 65 73 3A 20 24             
[  28]    0228: 6C 61 20 73 75 6D 61 20 64 65 20 6C   sumaDeProductos db "la suma de los productos es: $"
                6F 73 20 70 72 6F 64 75 63 74 6F 73 
                20 65 73 3A 20 24                   
[  29]    0246: 65 6C 20 76 61 6C 6F 72 20 61 20 71   ultimoValor db "el valor a que corresponde el ultimo digito de la suma es: $"
                75 65 20 63 6F 72 72 65 73 70 6F 6E 
                64 65 20 65 6C 20 75 6C 74 69 6D 6F 
                20 64 69 67 69 74 6F 20 64 65 20 6C 
                61 20 73 75 6D 61 20 65 73 3A 20 24 
                                                    
[  30]        :                                       
[  31]        :                                       ;ingreso de numeros
[  32]    0282: 00 00                                 dividendo1 dw ?
[  33]    0284: 00 00                                 dividendo2 dw ?
[  34]    0286: 00 00                                 divisor dw ?
[  35]    0288: 00 00                                 resto1 dw ?
[  36]    028A: 00 00                                 resto2 dw ?
[  37]    028C: 00 00                                 cociente1 dw ?
[  38]    028E: 00 00                                 cociente2 dw ?
[  39]    0290: 00 00                                 multiplicacionRestos dw ?
[  40]    0292: 00 00                                 multiplicacionCocientes dw ?
[  41]    0294: 00 00                                 sumaDeAmbosProductos dw ?
[  42]    0296: 00 00                                 unidad dw ?
[  43]        :                                       
[  44]        :                                       ;comienzo del programa cargando datos
[  45]    0298: BB 00 00                              mov bx, 0
[  46]    029B: B9 0A 00                              mov cx, arraytamaño
[  47]        :                                       
[  48]    029E:                                       cargaDelVector:
[  49]    029E: 51                                    push cx
[  50]    029F: B4 09                                 mov ah, 09h
[  51]    02A1: BA 02 01                              lea dx, ingreseNum
[  52]    02A4: CD 21                                 int 21h
[  53]    02A6: E8 39 01                              call scan_num
[  54]    02A9: 89 8F 00 01                           mov array[bx], cx
[  55]    02AD: 83 C3 01                              add bx, 1
[  56]    02B0: E8 6C 02                              call saltoDeLinea
[  57]    02B3: 59                                    pop cx
[  58]        :                                       
[  59]    02B4: E2 E8                                 loop cargaDelVector
[  60]        :                                       
[  61]        :                                       
[  62]    02B6: B9 0A 00                              mov cx,arraytamaño
[  63]        :                                       
[  64]        :                                       
[  65]        :                                       ;ingerso de los numeros para operar
[  66]    02B9: B4 09                                 mov ah, 09h
[  67]    02BB: BA 16 01                              lea dx, primerDividendo
[  68]    02BE: E8 21 01                              call scan_num
[  69]    02C1: E8 5B 02                              call SaltoDeLinea
[  70]    02C4: 89 0E 82 02                           mov dividendo1, cx
[  71]    02C8: CD 21                                 int 21h
[  72]        :                                       
[  73]    02CA: B4 09                                 mov ah, 09h
[  74]    02CC: BA 3D 01                              lea dx, segundoDividendo
[  75]    02CF: E8 10 01                              call scan_num
[  76]    02D2: E8 4A 02                              call saltoDeLinea
[  77]    02D5: 89 0E 84 02                           mov dividendo2, cx
[  78]    02D9: CD 21                                 int 21h
[  79]        :                                       
[  80]    02DB: B4 09                                 mov ah, 09h
[  81]    02DD: BA 65 01                              lea dx, divisorDeNumeros
[  82]    02E0: E8 FF 00                              call scan_num
[  83]    02E3: E8 39 02                              call saltoDeLinea
[  84]    02E6: 89 0E 86 02                           mov divisor, cx
[  85]    02EA: CD 21                                 int 21h
[  86]        :                                       
[  87]        :                                       ;primer division
[  88]    02EC: 33 C0                                 xor ax, ax
[  89]    02EE: 33 DB                                 xor bx, bx
[  90]    02F0: 33 D2                                 xor dx, dx
[  91]        :                                       
[  92]    02F2: A1 82 02                              mov ax, dividendo1
[  93]    02F5: 8B 1E 86 02                           mov bx, divisor
[  94]    02F9: F7 F3                                 div bx
[  95]        :                                       
[  96]    02FB: B4 09                                 mov ah, 09h
[  97]    02FD: BA 9F 01                              lea dx, cosDivisionA
[  98]    0300: A3 8C 02                              mov cociente1, ax
[  99]    0303: E8 A1 01                              call print_num
[ 100]    0306: E8 16 02                              call saltoDeLinea
[ 101]    0309: CD 21                                 int 21h
[ 102]        :                                       
[ 103]    030B: B4 09                                 mov ah, 09h
[ 104]    030D: BA 89 01                              lea dx, resDivisionA
[ 105]    0310: 89 16 88 02                           mov resto1, dx
[ 106]    0314: E8 90 01                              call print_num
[ 107]    0317: E8 05 02                              call saltoDeLinea
[ 108]    031A: CD 21                                 int 21h
[ 109]        :                                       
[ 110]    031C: 83 FA 00                              cmp dx, 0
[ 111]    031F: 74 00                                 jz complementoA2
[ 112]    0321:                                       proc
[ 113]    0321:                                       complementoA2:
[ 114]    0321: A1 86 02                              mov ax, divisor
[ 115]    0324: F7 D8                                 neg ax
[ 116]    0326: 8B 1E 8C 02                           mov bx, cociente1
[ 117]    032A: F7 DB                                 neg bx
[ 118]    032C: 2B C3                                 sub ax, bx
[ 119]        :                                       endp
[ 120]        :                                       
[ 121]        :                                       ;segunda divison
[ 122]    032E: 33 C0                                 xor ax, ax
[ 123]    0330: 33 DB                                 xor bx, bx
[ 124]    0332: 33 D2                                 xor dx, dx
[ 125]        :                                       
[ 126]    0334: A1 84 02                              mov ax, dividendo2
[ 127]    0337: 8B 1E 86 02                           mov bx, divisor
[ 128]    033B: F7 F3                                 div bx
[ 129]        :                                       
[ 130]    033D: B4 09                                 mov ah, 09h
[ 131]    033F: BA AD 01                              lea dx, cosDivisionB
[ 132]    0342: A3 8E 02                              mov cociente2, ax
[ 133]    0345: E8 5F 01                              call print_num
[ 134]    0348: E8 D4 01                              call saltoDeLinea
[ 135]    034B: CD 21                                 int 21h
[ 136]        :                                       
[ 137]    034D: B4 09                                 mov ah, 09h
[ 138]    034F: BA 94 01                              lea dx,resDivisionB
[ 139]    0352: 89 16 8A 02                           mov resto2, dx
[ 140]    0356: E8 4E 01                              call print_num
[ 141]    0359: E8 C3 01                              call saltoDeLinea
[ 142]    035C: CD 21                                 int 21h
[ 143]        :                                       
[ 144]    035E: 83 FA 00                              cmp dx, 0
[ 145]    0361: 74 00                                 jz CompA2
[ 146]        :                                       
[ 147]    0363:                                       CompA2 proc
[ 148]    0363: A1 86 02                              mov ax, divisor
[ 149]    0366: F7 D8                                 neg ax
[ 150]    0368: 8B 1E 8E 02                           mov bx, cociente2
[ 151]    036C: F7 DB                                 neg bx
[ 152]    036E: 2B C3                                 sub ax, bx
[ 153]        :                                       endp
[ 154]        :                                       
[ 155]        :                                       ;proceso de multiplicacion
[ 156]    0370: A1 8C 02                              mov ax, cociente1
[ 157]    0373: 8B 1E 8E 02                           mov bx, cociente2
[ 158]    0377: F7 E3                                 mul bx
[ 159]    0379: B4 09                                 mov ah, 09h
[ 160]    037B: BA F0 01                              lea dx, resMultiplicacionCocientes
[ 161]    037E: A3 92 02                              mov multiplicacionCocientes, ax
[ 162]    0381: E8 23 01                              call print_num
[ 163]    0384: E8 98 01                              call saltoDeLinea
[ 164]    0387: CD 21                                 int 21h
[ 165]        :                                       
[ 166]        :                                       
[ 167]    0389: A1 88 02                              mov ax, resto1
[ 168]    038C: 8B 1E 8A 02                           mov bx, resto2
[ 169]    0390: F7 E3                                 mul bx
[ 170]    0392: B4 09                                 mov ah, 09h
[ 171]    0394: BA BB 01                              lea dx, resMultiplicacionRestos
[ 172]    0397: A3 90 02                              mov multiplicacionRestos, ax
[ 173]    039A: E8 0A 01                              call print_num
[ 174]    039D: E8 7F 01                              call saltoDeLinea
[ 175]    03A0: CD 21                                 int 21h
[ 176]        :                                       
[ 177]        :                                       ;suma de los productos
[ 178]    03A2: A1 92 02                              mov ax, multiplicacionCocientes
[ 179]    03A5: 03 06 90 02                           add ax, multiplicacionRestos
[ 180]    03A9: B4 09                                 mov ah, 09h
[ 181]    03AB: BA 28 02                              lea dx, sumaDeProductos
[ 182]    03AE: A3 94 02                              mov sumaDeAmbosProductos, ax
[ 183]    03B1: E8 F3 00                              call print_num
[ 184]    03B4: E8 68 01                              call saltoDeLinea
[ 185]    03B7: CD 21                                 int 21h
[ 186]        :                                       
[ 187]    03B9: BB 0A 00                              mov bx, 10
[ 188]    03BC: F7 F3                                 div bx
[ 189]    03BE: 89 16 96 02                           mov unidad, dx
[ 190]    03C2: E8 E2 00                              call print_num
[ 191]        :                                       
[ 192]        :                                       ;valor final
[ 193]    03C5: B4 09                                 mov ah, 09h
[ 194]    03C7: BA 46 02                              lea dx, ultimoValor
[ 195]    03CA: 8B 1E 96 02                           mov bx, unidad
[ 196]    03CE: 8B 87 00 01                           mov ax, array[bx]
[ 197]    03D2: E8 D2 00                              call print_num
[ 198]    03D5: E8 47 01                              call saltoDeLinea
[ 199]    03D8: CD 21                                 int 21h
[ 200]        :                                       
[ 201]    03DA: EB 00                                 jmp final
[ 202]    03DC:                                       final:
[ 203]    03DC: CD 20                                 int 20h
[ 204]        :                                       
[ 205]        :                                       
[ 206]    03DE: C3                                    ret
[ 207]        :                                       
[ 208]        :                                       
[ 209]    03DF: E9 C3 00 52 50 56 B9 00 00 2E C6 06   DEFINE_SCAN_NUM
                A2 04 00 B4 00 CD 16 B4 0E CD 10 3C 
                2D 74 69 3C 0D 75 03 E9 93 00 3C 08 
                75 1E BA 00 00 8B C1 2E F7 36 A3 04 
                8B C8 50 B0 20 B4 0E CD 10 58 50 B0 
                08 B4 0E CD 10 58 EB CB 3C 30 73 02 
                EB 04 3C 39 76 1A 50 B0 08 B4 0E CD 
                10 58 50 B0 20 B4 0E CD 10 58 50 B0 
                08 B4 0E CD 10 58 EB A7 50 8B C1 2E 
                F7 26 A3 04 8B C8 58 83 FA 00 75 19 
                2C 30 B4 00 8B D1 03 C8 72 0A EB 8B 
                2E C6 06 A2 04 01 EB 83 8B CA BA 00 
                00 8B C1 2E F7 36 A3 04 8B C8 50 B0 
                08 B4 0E CD 10 58 50 B0 20 B4 0E CD 
                10 58 50 B0 08 B4 0E CD 10 58 E9 5A 
                FF 2E 80 3E A2 04 00 74 02 F7 D9 5E 
                58 5A C3 00 0A 00                   
[ 210]    04A5: EB 26 52 50 3D 00 00 75 0A 50 B0 30   DEFINE_PRINT_NUM
                B4 0E CD 10 58 EB 12 3D 00 00 79 0A 
                F7 D8 50 B0 2D B4 0E CD 10 58 E8 05 
                00 58 5A C3                         
[ 211]    04CD: EB 50 50 53 51 52 B9 01 00 BB 10 27   DEFINE_PRINT_NUM_UNS
                3D 00 00 74 32 83 FB 00 74 35 83 F9 
                00 74 04 3B C3 72 14 B9 00 00 BA 00 
                00 F7 F3 04 30 50 8A C0 B4 0E CD 10 
                58 8B C2 50 BA 00 00 8B C3 2E F7 36 
                1D 05 8B D8 58 EB CE 50 B0 30 B4 0E 
                CD 10 58 5A 59 5B 58 C3 0A 00       
[ 212]        :                                       
[ 213]        :                                       
[ 214]        :                                       ;Imprime un salto de línea.
[ 215]    051F:                                       saltoDeLinea proc
[ 216]    051F: 50                                    push ax
[ 217]    0520: 52                                    push dx
[ 218]    0521: B4 02                                 mov ah, 02h
[ 219]    0523: B2 0D                                 mov dl, 0Dh
[ 220]    0525: CD 21                                 int 21h
[ 221]    0527: B2 0A                                 mov dl, 0Ah
[ 222]    0529: CD 21                                 int 21h
[ 223]    052B: 5A                                    pop dx
[ 224]    052C: 58                                    pop ax
[ 225]    052D: C3                                    ret
[ 226]        :                                       endp
[ 227]        :                                       
 
===================================================================================================
 




===================================================================================================
